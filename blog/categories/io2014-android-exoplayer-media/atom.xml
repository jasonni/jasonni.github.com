<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: io2014,android,exoplayer,media | F2E Big Bang !!!]]></title>
  <link href="http://jasonni.github.io/blog/categories/io2014-android-exoplayer-media/atom.xml" rel="self"/>
  <link href="http://jasonni.github.io/"/>
  <updated>2014-08-07T16:18:59+08:00</updated>
  <id>http://jasonni.github.io/</id>
  <author>
    <name><![CDATA[Jason Ni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ExoPlayer 筆記]]></title>
    <link href="http://jasonni.github.io/blog/2014/08/05/exoplayer-bi-ji/"/>
    <updated>2014-08-05T15:21:00+08:00</updated>
    <id>http://jasonni.github.io/blog/2014/08/05/exoplayer-bi-ji</id>
    <content type="html"><![CDATA[<h2>ExoPlayer &ndash; An application level media player for Android</h2>

<p><img src="/images/exo_open_url.png" alt="exoplayer-url" /></p>

<h3>Before ExoPlayer</h3>

<p>之前 MediaPlayer 的用法</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MediaPlayer</span> <span class="n">player</span> <span class="o">=</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="n">uri</span><span class="o">,</span> <span class="n">display</span><span class="o">);</span>
</span><span class='line'><span class="n">player</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span>
</span><span class='line'><span class="n">player</span><span class="o">.</span><span class="na">release</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/exo_mp_framework.png" alt="mediaplayer-framework" /></p>

<p>MediaPlayer 隱藏很多的細節</p>

<p>方便使用卻難以客制化</p>

<p>例如自訂 buffer policy 或 cache</p>

<p>在 Jelly Bean 版本</p>

<p>Google 提供 MediaExtractor，MediaCodec and AudioTrack low-level API</p>

<p><img src="/images/exo_low_level_lib.png" alt="exo-low-level" /></p>

<p>讓 media player 方便去做客制化</p>

<p><img src="/images/exo_high_level_lib.png" alt="exo-high-level" /></p>

<h3>What&rsquo;s DASH</h3>

<p><a href="http://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP">DASH</a></p>

<p>允許在播放的期間，依照網路速度調整影片的品質</p>

<h3>ExoPlayer Benefit</h3>

<ul>
<li>Youtube use</li>
<li>支援 Dynamic adaptive streaming over HTTP (DASH) and SmoothStreaming playback</li>
<li>DRM 保護</li>
<li>ExoPlayer gives a lot more control</li>
<li>ExoPlayer can easily update</li>
</ul>


<p><img src="/images/exo_vs_mplayer.png" alt="exo vs mediaplayer" /></p>

<ul>
<li>減少啟動播放的延遲時間約 65%</li>
<li>重新 buffer 的機率少了 40%</li>
<li>平均播放高解析度影片的機率多了 11%</li>
</ul>


<h3>核心</h3>

<p><a href="http://developer.android.com/reference/android/media/MediaExtractor.html">MediaExtractor</a>
和
<a href="http://developer.android.com/reference/android/media/MediaCodec.html">MediaCodec</a></p>

<p><img src="/images/exo_framework.png" alt="exoplayer-framework" />
<img src="http://developer.android.com/images/exoplayer/object-model.png" alt="exoplayer-model" /></p>

<h3>提供</h3>

<h4>TrackRenderer</h4>

<p>一個 abstract class</p>

<p><em>負責處理 video，audio 或 text 的播放</em></p>

<p>ExoPlayer library 提供這些 implements class：</p>

<ul>
<li><strong>MediaCodecVideoTrackRenderer</strong> as the default implementations rendering video</li>
<li><strong>MediaCodecAudioTrackRenderer</strong> for audio</li>
<li><strong>TextTrackRenderer</strong> for text</li>
</ul>


<h4>SampleSource</h4>

<p>TrackRenderer 需要 <strong>SampleSource</strong> (interface)</p>

<p><em>它負責提供 格式資訊 和 media sample</em></p>

<p>ExoPlayer library 提供這些 implements class：</p>

<ul>
<li><p><strong>FrameworkSampleSource</strong> 使用 MediaExtractor 來 request，buffer 和解析 media sample!
<a href="http://developer.android.com/images/exoplayer/frameworksamplesource.png">FrameworkSampleSource</a>
  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kt">int</span> <span class="n">numRenderer</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="n">FrameworkSampleSource</span> <span class="n">sampleSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameworkSampleSource</span><span class="o">(</span><span class="n">activity</span><span class="o">,</span> <span class="n">uri</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">MediaCodecVideoTrackRenderer</span> <span class="n">videoRenderer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MediaCodecVideoTrackRenderer</span><span class="o">(</span><span class="n">sampleSource</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">MediaCodec</span><span class="o">.</span><span class="na">VIDEO_SCALING_MODE_SCALE_TO_FIT</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mainHandler</span><span class="o">,</span> <span class="n">playerActivity</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
</span><span class='line'>  <span class="n">MediaCodecAudioTrackRenderer</span> <span class="n">audioRenderer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MediaCodecAudioTrackRenderer</span><span class="o">(</span><span class="n">sampleSource</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ExoPlayer</span> <span class="n">player</span> <span class="o">=</span> <span class="n">ExoPlayer</span><span class="o">.</span><span class="na">Factory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">numRenderer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">player</span><span class="o">.</span><span class="na">prepare</span><span class="o">(</span><span class="n">videoRenderer</span><span class="o">,</span> <span class="n">audioRenderer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">player</span><span class="o">.</span><span class="na">setPlayWhenReady</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<em>注意到，video 和 audio 的來源是同一個 URI，它也能來自不同的 URI，只需要分別給予兩個 FrameworkSampleSource object</em></p></li>
<li><p><strong>ChunkSampleSource</strong> 提供 DASH or SmoothStreaming，未使用 MediaExtractor，而是自己實作 networking，buffering 和 media extraction</p>

<p>  它需要：</p>

<ul>
<li><strong>ChunkSource</strong> object，裡面包含 <strong>FormatEvaluator</strong> 和 <strong>DataSource</strong>

<ul>
<li>FormatEvaluator objects 會在每一塊 chunk 讀取前，去選擇有效的格式</li>
<li>DataSource objects 的任務就是去讀取資料</li>
</ul>
</li>
<li><strong>LoadControl</strong> object 可以控制 chunk 的 buffering 規則
<img src="http://developer.android.com/images/exoplayer/adaptive-streaming.png" alt="ChunkSampleSource" /></li>
</ul>
</li>
</ul>


<h4>Media presentation description parser</h4>

<p><strong>MediaPresentationDescriptionParser</strong> class to obtain <strong>Representation</strong> objects from media presentation description(MPD) files</p>

<h3>支援格式</h3>

<p>See <a href="http://developer.android.com/guide/appendix/media-formats.html">Supported Media Formats</a> for details</p>

<h3>參考資料</h3>

<p><a href="http://developer.android.com/guide/topics/media/exoplayer.html">ExoPlayer API Guide</a></p>

<p><a href="http://developer.android.com/guide/topics/media/exoplayer.htm://www.youtube.com/watch?v=92fgcUNCHic&amp;feature=youtube_gdata_player">Google I/O 2014 &ndash; Building great multi-media experiences on Android</a></p>

<p><a href="https://www.youtube.com/watch?v=6VjF638VObA">ExoPlayer: Adaptive video streaming on Android</a></p>
]]></content>
  </entry>
  
</feed>
